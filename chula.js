const { Client, GatewayIntentBits, ActivityType, version: djsVersion, Partials, EmbedBuilder, REST, Routes, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, PermissionsBitField } = require('discord.js');
const fs = require('fs');
const path = require('path');
const moment = require('moment');
require('dotenv').config();
const config = require('./config.js');
const os = require('os');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildPresences
  ],
  partials: [Partials.Channel, Partials.Message, Partials.User, Partials.GuildMember]
});

///////////////////////////////////////////////////////////////////////////////////////////////////
const statusTypes = ["dnd", "idle", "streaming"];
let statusIndex = 0;
let guild;

client.once("ready", async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}!`);
  await registerCommands();
  guild = client.guilds.cache.get(process.env.guildID);
  if (!guild) {
    console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!");
    return;
  }

  updateStatus();
  setInterval(updateStatus, 5000);
});

async function updateStatus() {
  if (!guild) return console.log("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ guild");

  await guild.members.fetch();
  const memberCount = guild.memberCount;

  const statuses = [
    { text: `üåç ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà | ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${memberCount} ‡∏Ñ‡∏ô`, type: ActivityType.Watching },
    { text: `üïí ‡∏≠‡∏≠‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${Math.floor(process.uptime() / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ`, type: ActivityType.Watching },
    { text: `üí¨ ‡πÉ‡∏ä‡πâ /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`, type: ActivityType.Listening },
    { text: `üéÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö ${memberCount} ‡∏Ñ‡∏ô`, type: ActivityType.Playing },
    { text: `üöÄ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ SAMYAN 109`, type: ActivityType.Watching },
    { text: `üé• ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Twitch!`, type: ActivityType.Streaming, url: "https://www.twitch.tv/nonyread" },
    { text: `üîî ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!`, type: ActivityType.Watching },
    { text: `ü§ñ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß!`, type: ActivityType.Competing },
    { text: `üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î`, type: ActivityType.Listening },
    { text: `üìå ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡∏ó‡∏µ‡πà rules`, type: ActivityType.Watching },
    { text: `üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà...`, type: ActivityType.Playing }
  ];

  const status = statuses[statusIndex];

  client.user.setPresence({
    activities: [{ name: status.text, type: status.type, url: status.url || undefined }],
    status: status.text.includes("‡∏™‡∏ï‡∏£‡∏µ‡∏°") ? "streaming" : statusTypes[statusIndex % statusTypes.length]
  });

  statusIndex = (statusIndex + 1) % statuses.length;
}
///////////////////////////////////////////////////////////////////////////////////////////////////

async function registerCommands() {
  const commands = [
    {
      name: 'role',
      description: '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      options: []
    },
    {
      name: 'setup',
      description: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)',
      options: []
    },
    {
      name: 'help',
      description: '‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
      options: []
    },
    {
      name: 'botinfo',
      description: '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
      options: []
    },
    {
      name: 'ping',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
      options: []
    }
  ];

  const rest = new REST({ version: '10' }).setToken(config.token);

  try {
    await rest.put(
      Routes.applicationCommands(config.clientId),
      { body: commands }
    );
  } catch (error) {
    console.error(error);
  }
}

client.on("interactionCreate", async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'role') {
    await handleRoleCommand(interaction);
  }
  else if (commandName === 'setup') {
    await handleSetupCommand(interaction);
  }
  else if (commandName === 'help') {
    await handleHelpCommand(interaction);
  }
  else if (commandName === 'ping') {
    await interaction.reply({ content: `üèì Pong! Latency: ${client.ws.ping}ms`, ephemeral: true });
  }
  else if (commandName === "botinfo") {
    const platform = os.platform();
    const cpu = os.cpus()[0].model;
    const uptime = os.uptime();
    const botUptime = process.uptime();
    const totalMem = os.totalmem() / 1024 / 1024 / 1024;
    const freeMem = os.freemem() / 1024 / 1024 / 1024;
    const usedMem = totalMem - freeMem;
    const cpuUsage = (process.cpuUsage().user / 1000000).toFixed(2);
    const nodeVersion = process.version;
    const serverCount = client.guilds.cache.size;
    const userCount = client.users.cache.size;

    function formatTime(seconds) {
      const days = Math.floor(seconds / 86400);
      const hours = Math.floor((seconds % 86400) / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      return `${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    }

    const embed = new EmbedBuilder()
      .setColor("#ff6600")
      .setTitle("ü§ñ **Bot Information**")
      .setThumbnail(client.user.displayAvatarURL())
      .setDescription("üí° **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**")
      .addFields(
        { name: "üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó", value: `\`${client.user.username}\``, inline: true },
        { name: "üíª ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô", value: `\`${platform}\``, inline: true },
        { name: "‚öôÔ∏è CPU", value: `\`${cpu}\``, inline: false },
        { name: "üìä RAM ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ", value: `\`${usedMem.toFixed(2)} GB / ${totalMem.toFixed(2)} GB\``, inline: true },
        { name: "üü¢ RAM ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠", value: `\`${freeMem.toFixed(2)} GB\``, inline: true },
        { name: "‚è≥ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß", value: `\`${formatTime(uptime)}\``, inline: false },
        { name: "üïí ‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß", value: `\`${formatTime(botUptime)}\``, inline: false },
        { name: "üñ•Ô∏è Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô", value: `\`${nodeVersion}\``, inline: true },
        { name: "üìú Discord.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô", value: `\`${djsVersion}\``, inline: true },
        { name: "üåç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", value: `\`${serverCount} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\``, inline: true },
        { name: "üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value: `\`${userCount} ‡∏Ñ‡∏ô\``, inline: true },
        { name: "üî• CPU Usage", value: `\`${cpuUsage}%\``, inline: true },
        { name: "üë®‚Äçüíª ‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤", value: `\`SAMYAN 109\``, inline: true }
      )
      .setImage("https://media.giphy.com/media/ZVik7pBtu9dNS/giphy.gif?cid=790b76118t1t5lpb5f35t6n1l4hk0uq7aj5wfaqydmcoko6q&ep=v1_gifs_search&rid=giphy.gif&ct=g")
      .setFooter({ text: `‡∏ö‡∏≠‡∏ó‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ SAMYAN 109`, iconURL: interaction.user.displayAvatarURL() });

    await interaction.reply({ embeds: [embed] });
  }
});


async function handleRoleCommand(interaction) {
  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('decorative_roles')
        .setLabel('üé≠ ‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('sex_roles')
        .setLabel('üéÆ ‡∏¢‡∏®‡πÄ‡∏û‡∏®')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('game_roles')
        .setLabel('üéÆ ‡∏¢‡∏®‡πÄ‡∏Å‡∏°')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('color_roles')
        .setLabel('üé® ‡∏¢‡∏®‡∏™‡∏µ')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('notification_roles')
        .setLabel('üîî ‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô')
        .setStyle(ButtonStyle.Secondary)
    );

  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üåü ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏®')
    .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á')
    .setImage('https://media1.tenor.com/m/MhsdqUU_djAAAAAC/aesthetic-wallpaper-anime.gif')
    .setFooter({ text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', iconURL: interaction.guild.iconURL() });

  await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}


async function handleSetupCommand(interaction) {

  if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true });
  }

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('setup_welcome')
        .setLabel('üéâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('setup_roles')
        .setLabel('üé≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('setup_channels')
        .setLabel('üìÇ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏®')
        .setStyle(ButtonStyle.Secondary)
    );

  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')
    .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á')
    .setFooter({ text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', iconURL: interaction.guild.iconURL() });

  await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}


async function handleHelpCommand(interaction) {
  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
    .setDescription('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ')
    .addFields(
      { name: '/role', value: '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' },
      { name: '/setup', value: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)' },
      { name: '/help', value: '‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó' },
      { name: '/ping', value: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó' }
    )
    .setFooter({ text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', iconURL: interaction.guild.iconURL() });

  await interaction.reply({ embeds: [embed], ephemeral: true });
}


client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const { customId } = interaction;


  if (customId === 'decorative_roles') {
    await showDecorativeRoles(interaction);
  }
  else if (customId === 'sex_roles') {
    await showSexRoles(interaction);
  }
  else if (customId === 'game_roles') {
    await showGameRoles(interaction);
  }
  else if (customId === 'color_roles') {
    await showColorRoles(interaction);
  }
  else if (customId === 'notification_roles') {
    await showNotificationRoles(interaction);
  }


  else if (customId === 'setup_welcome') {
    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
      return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true });
    }
    await setupWelcomeChannel(interaction);
  }
  else if (customId === 'setup_roles') {
    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
      return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true });
    }
    await setupPublicRoleMenu(interaction);
  }
  else if (customId === 'setup_channels') {
    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
      return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true });
    }
    await setupRoleChannels(interaction);
  }
});


async function showDecorativeRoles(interaction) {
  const options = config.decorativeRoles.map(role => ({
    label: `üé≠ ${role.name}`,
    value: role.value,
    description: role.description,
  }));

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_decorative_role')
      .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setMinValues(0)
      .setMaxValues(5)
      .addOptions(options)
  );

  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üé≠ **‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á**')
    .setDescription('‚Äî ‚ú® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ 1 ‡∏¢‡∏®) ‚ú® ‚Äî')
    .setThumbnail('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2JyaDhnODRrNjc0djFxeWR5NmdiNDE0d2IyZmE4bXdhYmh0Zzk2MSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/yASFCj2K0MGeASqSom/giphy.gif')
    .setImage('https://media1.tenor.com/m/MhsdqUU_djAAAAAC/aesthetic-wallpaper-anime.gif')
    .setFooter({ text: 'üî∏ ‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á üî∏', iconURL: interaction.guild.iconURL() });

  await interaction.deferReply();
  await interaction.editReply({ embeds: [embed], components: [row] });
}
////////////////////////////////////////////////////////////////
async function showSexRoles(interaction) {
  const options = config.sexRoles.map(role => ({
    label: `üéÆ ${role.name}`,
    value: role.value,
    description: role.description,
  }));

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_sex_role')
      .setPlaceholder('üëßüèª ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setMinValues(0)
      .setMaxValues(1)
      .setMaxValues(config.sexRoles.length)
      .addOptions(options)
  );

  const embed = new EmbedBuilder()
    .setColor('#33cc33')
    .setTitle('üëßüèª **‡∏¢‡∏®‡πÄ‡∏û‡∏®**')
    .setDescription('‚Äî üëßüèª ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üëßüèª ‚Äî\nüü¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÄ‡∏û‡∏®‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏ô‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏™')
    .setThumbnail('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2JyaDhnODRrNjc0djFxeWR5NmdiNDE0d2IyZmE4bXdhYmh0Zzk2MSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/yASFCj2K0MGeASqSom/giphy.gif')
    .setImage('https://media1.tenor.com/m/MhsdqUU_djAAAAAC/aesthetic-wallpaper-anime.gif')
    .setFooter({ text: 'üéÆ ‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© üéÆ', iconURL: interaction.guild.iconURL() });

  await interaction.deferReply();
  await interaction.editReply({ embeds: [embed], components: [row] });
}
////////////////////////////////////////////////////////////////
async function showGameRoles(interaction) {
  const options = config.gameRoles.map(role => ({
    label: `üéÆ ${role.name}`,
    value: role.value,
    description: role.description,
  }));

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_game_role')
      .setPlaceholder('üéÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setMinValues(0)
      .setMaxValues(5)
      .setMaxValues(config.gameRoles.length)
      .addOptions(options)
  );

  const embed = new EmbedBuilder()
    .setColor('#33cc33')
    .setTitle('üéÆ **‡∏¢‡∏®‡πÄ‡∏Å‡∏°**')
    .setDescription('‚Äî üïπÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏¢‡∏®) üïπÔ∏è ‚Äî\nüü¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÜ')
    .setThumbnail('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2JyaDhnODRrNjc0djFxeWR5NmdiNDE0d2IyZmE4bXdhYmh0Zzk2MSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/yASFCj2K0MGeASqSom/giphy.gif')
    .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExam1jcGp6ZGlsbDJueDEyanYzMjZuM2p4a2lpdGxsamFrMTZpbDEwbiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/y0NFayaBeiWEU/giphy.gif')
    .setFooter({ text: 'üéÆ ‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© üéÆ', iconURL: interaction.guild.iconURL() });

  await interaction.deferReply();
  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function showColorRoles(interaction) {
  const options = config.colorRoles.map(role => ({
    label: `üé® ${role.name}`,
    value: role.value,
    description: role.description,
  }));

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_color_role')
      .setPlaceholder('üåà ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setMinValues(0)
      .setMaxValues(1)
      .addOptions(options)
  );

  const embed = new EmbedBuilder()
    .setColor('#ff3333')
    .setTitle('üé® **‡∏¢‡∏®‡∏™‡∏µ**')
    .setDescription('‚Äî üåà ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ 1 ‡∏™‡∏µ) üåà ‚Äî')
    .setThumbnail('https://cdn.discordapp.com/emojis/1065001930634897428.gif?size=96')
    .setImage('https://media1.tenor.com/m/MhsdqUU_djAAAAAC/aesthetic-wallpaper-anime.gif')
    .setFooter({ text: 'üé® ‡∏™‡∏µ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üé®', iconURL: interaction.guild.iconURL() });

  await interaction.deferReply();
  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function handleRoleSelection(interaction) {
  try {

    if (!interaction.isSelectMenu()) return;


    await interaction.deferReply({ ephemeral: true });

    const member = interaction.member;
    const selectedRoles = interaction.values;

    for (const roleId of selectedRoles) {
      let role = interaction.guild.roles.cache.get(roleId);
      if (!role) continue;


      if (member.roles.cache.has(role.id)) {
        await member.roles.remove(role);
      } else {
        await member.roles.add(role);
      }
    }


    if (interaction.replied || interaction.deferred) {
      await interaction.editReply({
        content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®: ${selectedRoles.map(id => `<@&${id}>`).join(', ')}! üéâ`,
      });
    }
  } catch (error) {
    console.error('‚ùå Error handling role selection:', error);
  }
}


async function showNotificationRoles(interaction) {
  const options = config.notificationRoles.map(role => ({
    label: role.name,
    value: role.value,
    description: role.description,
  }));

  const row = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('select_notification_role')
      .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setMinValues(0)
      .setMaxValues(1)
      .addOptions(options)
  );

  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üîî ‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô')
    .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ 1 ‡∏¢‡∏®)')
    .setImage('https://i.pinimg.com/originals/2f/bc/21/2fbc21830cfdc2e1178081000f4e8d06.gif')
    .setFooter({ text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', iconURL: interaction.guild.iconURL() });

  await interaction.deferReply({ ephemeral: true });
  await interaction.editReply({ embeds: [embed], components: [row] });
}


async function setupPublicRoleMenu(interaction) {
  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üé≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞')
    .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ')
    .setImage('https://i.pinimg.com/originals/2f/bc/21/2fbc21830cfdc2e1178081000f4e8d06.gif')
    .setFooter({ text: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', iconURL: interaction.guild.iconURL() });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('create_decorative_menu')
        .setLabel('üé≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('create_decorative_menu')
        .setLabel('üßëüèª ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡πÄ‡∏û‡∏®')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('create_game_menu')
        .setLabel('üéÆ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡πÄ‡∏Å‡∏°')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('create_color_menu')
        .setLabel('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡∏™‡∏µ')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('create_notification_menu')
        .setLabel('üîî ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô')
        .setStyle(ButtonStyle.Secondary)
    );

  await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}


async function setupRoleChannels(interaction) {
  const embed = new EmbedBuilder()
    .setColor('#ff9900')
    .setTitle('üìÇ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏®')
    .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏®‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏î‡πâ')
    .setImage('https://media1.tenor.com/m/MhsdqUU_djAAAAAC/aesthetic-wallpaper-anime.gif')
    .setFooter({ text: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏®', iconURL: interaction.guild.iconURL() });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('setup_game_channels')
        .setLabel('üéÆ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°')
        .setStyle(ButtonStyle.Primary)
    );

  await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}

client.on('interactionCreate', async interaction => {
  if (!interaction.isStringSelectMenu()) return;

  const { customId, values, member } = interaction;


  if (customId === 'select_decorative_role') {

    for (const role of config.decorativeRoles) {
      const guildRole = interaction.guild.roles.cache.find(r => r.name === role.name);
      if (guildRole && member.roles.cache.has(guildRole.id)) {
        await member.roles.remove(guildRole);
      }
    }


    if (values.length > 0) {
      const value = values[0];
      const roleConfig = config.decorativeRoles.find(r => r.value === value);


      let guildRole = interaction.guild.roles.cache.find(r => r.name === roleConfig.name);

      if (!guildRole) {

        try {
          guildRole = await interaction.guild.roles.create({
            name: roleConfig ? roleConfig.name : `${value}`,
            color: roleConfig ? roleConfig.color : '#ff9900',
            reason: 'Automatic role creation by role bot'
          });
        } catch (error) {
          console.error('Error creating role:', error);
          return interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', ephemeral: true });
        }
      }


      await member.roles.add(guildRole);

      const roleName = roleConfig ? roleConfig.name : value;
      await interaction.reply({ content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á: ${roleName} ‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
    } else {
      await interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏¢‡∏®‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß', ephemeral: true });
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  else if (customId === 'select_sex_role') {

    for (const role of config.sexRoles) {
      const guildRole = interaction.guild.roles.cache.find(r => r.name === role.name);
      if (guildRole && member.roles.cache.has(guildRole.id)) {
        await member.roles.remove(guildRole);
      }
    }


    if (values.length > 0) {
      const value = values[0];
      const roleConfig = config.sexRoles.find(r => r.value === value);


      let guildRole = interaction.guild.roles.cache.find(r => r.name === roleConfig.name);

      if (!guildRole) {

        try {
          guildRole = await interaction.guild.roles.create({
            name: roleConfig ? roleConfig.name : `${value}`,
            color: roleConfig ? roleConfig.color : '#ff3333',
            reason: 'Automatic role creation by role bot'
          });
        } catch (error) {
          console.error('Error creating role:', error);
          return interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', ephemeral: true });
        }
      }


      await member.roles.add(guildRole);

      const roleName = roleConfig ? roleConfig.name : value;
      await interaction.reply({ content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏µ: ${roleName} ‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
    } else {
      await interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏¢‡∏®‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß', ephemeral: true });
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (customId === 'select_game_role') {

    for (const role of config.gameRoles) {
      const guildRole = interaction.guild.roles.cache.find(r => r.name === role.name);
      if (guildRole && member.roles.cache.has(guildRole.id)) {
        await member.roles.remove(guildRole);
      }
    }


    const selectedRoles = [];

    for (const value of values) {
      const roleConfig = config.gameRoles.find(r => r.value === value);


      let guildRole = interaction.guild.roles.cache.find(r => r.name === roleConfig.name);

      if (!guildRole) {

        try {
          guildRole = await interaction.guild.roles.create({
            name: roleConfig ? roleConfig.name : `${value}`,
            color: roleConfig ? roleConfig.color : '#33cc33',
            reason: 'Automatic role creation by role bot'
          });
        } catch (error) {
          console.error('Error creating role:', error);
          continue;
        }
      }


      await member.roles.add(guildRole);
      selectedRoles.push(roleConfig ? roleConfig.name : value);


      if (roleConfig && roleConfig.channelId) {
        const channel = interaction.guild.channels.cache.get(roleConfig.channelId);
        if (channel) {
          try {
            await channel.permissionOverwrites.create(member, {
              ViewChannel: true
            });
          } catch (error) {
            console.error(`Error setting channel permissions for ${channel.name}:`, error);
          }
        }
      }
    }

    if (selectedRoles.length > 0) {
      await interaction.reply({
        content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÄ‡∏Å‡∏°: ${selectedRoles.join(', ')} ‡πÅ‡∏•‡πâ‡∏ß!`,
        ephemeral: true
      });
    } else {
      await interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏¢‡∏®‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß',
        ephemeral: true
      });
    }
  }


  else if (customId === 'select_color_role') {

    for (const role of config.colorRoles) {
      const guildRole = interaction.guild.roles.cache.find(r => r.name === role.name);
      if (guildRole && member.roles.cache.has(guildRole.id)) {
        await member.roles.remove(guildRole);
      }
    }


    if (values.length > 0) {
      const value = values[0];
      const roleConfig = config.colorRoles.find(r => r.value === value);


      let guildRole = interaction.guild.roles.cache.find(r => r.name === roleConfig.name);

      if (!guildRole) {

        try {
          guildRole = await interaction.guild.roles.create({
            name: roleConfig ? roleConfig.name : `${value}`,
            color: roleConfig ? roleConfig.color : '#ff3333',
            reason: 'Automatic role creation by role bot'
          });
        } catch (error) {
          console.error('Error creating role:', error);
          return interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', ephemeral: true });
        }
      }


      await member.roles.add(guildRole);

      const roleName = roleConfig ? roleConfig.name : value;
      await interaction.reply({ content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏µ: ${roleName} ‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
    } else {
      await interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏¢‡∏®‡∏™‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß', ephemeral: true });
    }
  }


  else if (customId === 'select_notification_role') {

    for (const role of config.notificationRoles) {
      const guildRole = interaction.guild.roles.cache.find(r => r.name === role.name);
      if (guildRole && member.roles.cache.has(guildRole.id)) {
        await member.roles.remove(guildRole);
      }
    }


    const selectedRoles = [];

    for (const value of values) {
      const roleConfig = config.notificationRoles.find(r => r.value === value);


      let guildRole = interaction.guild.roles.cache.find(r => r.name === roleConfig.name);

      if (!guildRole) {

        try {
          guildRole = await interaction.guild.roles.create({
            name: roleConfig ? roleConfig.name : `${value}`,
            color: roleConfig ? roleConfig.color : '#9999ff',
            reason: 'Automatic role creation by role bot'
          });
        } catch (error) {
          console.error('Error creating role:', error);
          continue;
        }
      }


      await member.roles.add(guildRole);
      selectedRoles.push(roleConfig ? roleConfig.name : value);
    }

    if (selectedRoles.length > 0) {
      await interaction.reply({
        content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${selectedRoles.join(', ')} ‡πÅ‡∏•‡πâ‡∏ß!`,
        ephemeral: true
      });
    } else {
      await interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏¢‡∏®‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß',
        ephemeral: true
      });
    }
  }
});

client.on('guildMemberAdd', async member => {
  try {
    const welcomeChannel = member.guild.channels.cache.find(ch => ch.name === config.welcomeChannelName);
    if (!welcomeChannel) return;

    const welcomeGif = 'https://media.giphy.com/media/xUPGcEliCc7bETyfO8/giphy.gif';
    const username = `\`${member.user.username}\``;

    const buttons = new ActionRowBuilder();
    if (config.rulesLink) {
      buttons.addComponents(
        new ButtonBuilder()
          .setLabel('üìú ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå')
          .setURL(config.rulesLink)
          .setStyle(ButtonStyle.Link)
      );
    }
    if (config.introLink) {
      buttons.addComponents(
        new ButtonBuilder()
          .setLabel('üéâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏ä‡∏ó‡πÄ‡∏•‡∏¢!')
          .setURL(config.introLink)
          .setStyle(ButtonStyle.Link)
      );
    }

    const embed = new EmbedBuilder()
      .setColor('#FFB6C1')
      .setTitle(`‚ú® ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${username}! ‚ú®`)
      .setDescription(`
üéä **${username} ‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÅ‡∏•‡πâ‡∏ß!**  
> üè† **‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:** \`${member.guild.name}\`  
> üìÖ **‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠:** <t:${Math.floor(member.joinedTimestamp / 1000)}:R>

üéà **‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ**
            `)
      .setImage(welcomeGif)
      .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 1024 }))
      .setFooter({ text: 'üíö ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', iconURL: member.guild.iconURL({ dynamic: true }) })
      .setTimestamp();

    if (buttons.components.length > 0) {
      await welcomeChannel.send({ embeds: [embed], components: [buttons] });
    } else {
      await welcomeChannel.send({ embeds: [embed] });
    }
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö:", error);
  }
});

client.on('guildMemberRemove', async member => {
  try {
    const goodbyeChannel = member.guild.channels.cache.find(ch => ch.name === config.goodbyeChannelName);
    if (!goodbyeChannel) return;

    const goodbyeGif = 'https://media.giphy.com/media/vxNCVEe0PI9A3YVJEX/giphy.gif?cid=790b7611q6meakpa0oxbl22junxj8rdouoat6ezkr8df8jfn&ep=v1_gifs_search&rid=giphy.gif&ct=g';
    const username = `\`${member.user.username}\``;

    const timeInServer = moment.duration(member.joinedTimestamp - Date.now()).humanize(true);

    const embed = new EmbedBuilder()
      .setColor('#FF6347')
      .setTitle(`üíî ‡∏≠‡∏≥‡∏•‡∏≤ ${username} üíî`)
      .setDescription(`
üò≠ **${username} ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß...**  
> üè† **‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:** \`${member.guild.name}\`  
> ‚è≥ **‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:** \`${timeInServer}\`

üíñ **‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï!**  
            `)
      .setImage(goodbyeGif)
      .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 1024 }))
      .setFooter({ text: 'üëã ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≥‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', iconURL: member.guild.iconURL({ dynamic: true }) })
      .setTimestamp();

    await goodbyeChannel.send({ embeds: [embed] });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≥‡∏•‡∏≤:", error);
  }
});

client.login(config.token);